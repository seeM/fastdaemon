# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['send_strings', 'readlen', 'recv_strings', 'start_client', 'send_recv', 'fastdaemon_client']

# %% ../00_core.ipynb 2
import argparse,socket,struct,sys

# %% ../00_core.ipynb 4
def _send_string(w, s):
    if isinstance(s,str): s = s.encode('utf-8')
    l = len(s)
    w(struct.pack(f'!L{l}s', l, s))

# %% ../00_core.ipynb 5
def send_strings(w, ss):
    "Send a list of variable length utf-8-encoded strings"
    for s in ss: _send_string(w, s)

# %% ../00_core.ipynb 7
def readlen(r):
    "Read the length of the next string"
    return struct.unpack('!L', r(4))[0]

# %% ../00_core.ipynb 9
def recv_strings(r):
    "Receive a 2-tuple of variable length utf-8-encoded strings"
    res = []
    for _ in range(2):
        l = readlen(r)
        s = struct.unpack(f'{l}s', r(l))[0].decode('utf-8')
        res.append(s)
    return res

# %% ../00_core.ipynb 11
def _socket_det(port,host,dgram):
    # Source: https://github.com/fastai/fastcore/blob/da9ca219c86190d22f4dbf2c3cad619c477d64a4/fastcore/net.py#L222-L225
    if isinstance(port,int): family,addr = socket.AF_INET,(host or socket.gethostname(),port)
    else: family,addr = socket.AF_UNIX,port
    return family,addr,(socket.SOCK_STREAM,socket.SOCK_DGRAM)[dgram]

# %% ../00_core.ipynb 12
def start_client(port, host=None, dgram=False):
    "Create a `socket` client on `port`, with optional `host`, of type `dgram`"
    # Source: https://github.com/fastai/fastcore/blob/da9ca219c86190d22f4dbf2c3cad619c477d64a4/fastcore/net.py#L242-L247
    family,addr,typ = _socket_det(port,host,dgram)
    s = socket.socket(family, typ)
    s.connect(addr)
    return s

# %% ../00_core.ipynb 16
def send_recv(streams, port, host=None, dgram=False):
    "Wraps `start_client`, `send_strings`, and `recv_strings`"
    with start_client(port, host=host, dgram=dgram) as client:
        with client.makefile('wb') as f: send_strings(f.write, streams)
        with client.makefile('rb') as f: return recv_strings(f.read)

# %% ../00_core.ipynb 17
def _fastdaemon_client(port, host, args):
    args = ' '.join(args)
    stdin = sys.stdin.read() if not sys.stdin.isatty() else ''
    stdout,stderr = send_recv((stdin,args), port, host)
    sys.stderr.write(stderr)
    sys.stdout.write(stdout)

# %% ../00_core.ipynb 18
def fastdaemon_client(argv=None):
    "Forward `sys.args` and `sys.stdin` to `fastdaemon_server` and write response `stdout` and `stderr`"
    if argv is None: argv = sys.argv[1:]
    p = argparse.ArgumentParser(description=fastdaemon_client.__doc__)
    p.add_argument('port', type=int, help='Port to connect to')
    p.add_argument('--host', type=str, help='Host to connect to', default=None)
    args,rest = p.parse_known_args(argv)
    args.args = rest
    _fastdaemon_client(**vars(args))
