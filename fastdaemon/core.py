# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['DaemonHandler', 'DaemonServer', 'fastdaemon']

# %% ../00_core.ipynb 2
from concurrent.futures import ProcessPoolExecutor
from contextlib import redirect_stdout
from io import StringIO
from multiprocessing import get_context
from socketserver import TCPServer, StreamRequestHandler
import time

from fastcore.meta import *
from fastcore.script import *
from fastcore.utils import *

from nbprocess.clean import nbprocess_clean

# %% ../00_core.ipynb 5
def _handle(func, data):
    argv = data.decode().strip()
    sys.argv = [func.__name__] + (argv.split(' ') if argv else [])
    print('sys.argv:', sys.argv)
    with redirect_stdout(StringIO()) as s: func()
    return s.getvalue().encode()

# %% ../00_core.ipynb 6
class DaemonHandler(StreamRequestHandler):
    def handle(self):
        data = self.rfile.readline().strip()
        print("{} wrote:".format(self.client_address[0]))
        print('data:', data)
        future = self.server.pool.submit(_handle, self.server.func, data)
        result = future.result()
        print('result:', result)
        self.wfile.write(result)

# %% ../00_core.ipynb 7
class DaemonServer(TCPServer):
    @delegates(TCPServer)
    def __init__(self, server_address, RequestHandlerClass, func, timeout=None, **kwargs):
        self.func,self.timeout = func,timeout
        super().__init__(server_address, RequestHandlerClass)
        
    def server_activate(self):
        self.pool = ProcessPoolExecutor(mp_context=get_context('fork')) # TODO: make ctx configurable?
        super().server_activate()
        
    def server_close(self):
        if hasattr(self,'pool'): self.pool.shutdown()
        super().server_close()
        
    def handle_timeout(self):
        print('timed out')
        return True

# %% ../00_core.ipynb 11
if __name__ == '__main__':
    with DaemonServer(('localhost',9999), DaemonHandler, nbprocess_clean, 3) as srv:
        while not srv.handle_request(): pass

# %% ../00_core.ipynb 12
@call_parse#(nested=True)
def fastdaemon():
    "Fast scripts using daemon mode"
    print(f'Called fastdaemon, with: {locals()}')
    with ProcessPoolExecutor() as pool:
        future = pool.submit(add1, 0)
        result = future.result()
        print(pool._processes)
    return result
